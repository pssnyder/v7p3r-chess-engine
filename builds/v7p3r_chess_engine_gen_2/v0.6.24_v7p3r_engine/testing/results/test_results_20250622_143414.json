{
  "total_tests": 1,
  "passed": 0,
  "failed": 1,
  "skipped": 0,
  "errors": 0,
  "timeouts": 0,
  "total_duration": 0.231796,
  "start_time": "2025-06-22T14:34:14.738887",
  "end_time": "2025-06-22T14:34:14.970683",
  "success_rate": 0.0,
  "average_duration": 0.227552,
  "max_memory_usage": 0.125,
  "test_results": [
    {
      "test_name": "opening_book_testing",
      "module_name": "opening_book_testing.py",
      "status": "failed",
      "duration": 0.227552,
      "start_time": "2025-06-22T14:34:14.742995",
      "end_time": "2025-06-22T14:34:14.970547",
      "error_message": "test_book_coverage_depth (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_book_coverage_depth)\nTest opening book coverage depth. ... ok\ntest_move_weight_system (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_move_weight_system)\nTest move weight system. ... ok\ntest_opening_transpositions (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_opening_transpositions)\nTest handling of opening transpositions. ... FAIL\ntest_position_lookup_by_fen (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_position_lookup_by_fen)\nTest position lookup using FEN strings. ... ok\ntest_symmetrical_openings (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_symmetrical_openings)\nTest handling of symmetrical openings. ... ok\ntest_corrupted_book_data (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_corrupted_book_data)\nTest handling of corrupted book data. ... ERROR\ntest_empty_move_list (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_empty_move_list)\nTest handling of empty move lists. ... ok\ntest_invalid_board_state (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_board_state)\nTest handling of invalid board states. ... ERROR\ntest_invalid_move_objects (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_move_objects)\nTest handling of invalid move objects in book. ... ok\ntest_book_population (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_book_population)\nTest that book is populated with openings. ... ok\ntest_common_openings_included (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_common_openings_included)\nTest that common openings are included. ... ok\ntest_init_creates_book (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_init_creates_book)\nTest that initialization creates opening book. ... ok\ntest_starting_position_moves (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_starting_position_moves)\nTest moves available from starting position. ... ok\ntest_book_move_vs_random_move (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_book_move_vs_random_move)\nTest that book moves are different from random moves. ... ok\ntest_integration_with_chess_engine (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_integration_with_chess_engine)\nTest integration with chess engine workflow. ... ok\ntest_opening_sequence_consistency (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_opening_sequence_consistency)\nTest consistency of opening sequences. ... ok\ntest_get_book_move_after_d4 (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_after_d4)\nTest getting book move after 1.d4. ... ok\ntest_get_book_move_after_e4 (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_after_e4)\nTest getting book move after 1.e4. ... ok\ntest_get_book_move_from_starting_position (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_from_starting_position)\nTest getting book move from starting position. ... ok\ntest_get_book_move_unknown_position (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_unknown_position)\nTest getting book move from unknown position. ... ok\ntest_get_book_move_weighted_selection (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_weighted_selection)\nTest that move selection respects weights. ... ok\ntest_random_selection_consistency (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_random_selection_consistency)\nTest that random selection is consistent with weights. ... ok\ntest_initialization_performance (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_initialization_performance)\nTest opening book initialization performance. ... ok\ntest_memory_usage (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_memory_usage)\nTest memory usage of opening book. ... ok\ntest_move_lookup_performance (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_move_lookup_performance)\nTest move lookup performance. ... ok\ntest_position_coverage_efficiency (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_position_coverage_efficiency)\nTest efficiency of position coverage. ... ok\n\n======================================================================\nERROR: test_corrupted_book_data (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_corrupted_book_data)\nTest handling of corrupted book data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 269, in test_corrupted_book_data\n    board = chess.Board('invalid_fen')  # This will raise exception\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 1711, in __init__\n    self.set_fen(fen)\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 2646, in set_fen\n    self._set_board_fen(board_part)\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 1132, in _set_board_fen\n    raise ValueError(f\"expected 8 rows in position part of fen: {fen!r}\")\nValueError: expected 8 rows in position part of fen: 'invalid_fen'\n\n======================================================================\nERROR: test_invalid_board_state (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_board_state)\nTest handling of invalid board states.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 259, in test_invalid_board_state\n    result = self.book.get_book_move(None)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\../..\\engine_utilities\\opening_book.py\", line 97, in get_book_move\n    fen = board.fen()\n          ^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'fen'\n\n======================================================================\nFAIL: test_opening_transpositions (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_opening_transpositions)\nTest handling of opening transpositions.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 224, in test_opening_transpositions\n    self.assertEqual(board1.fen(), board2.fen())\nAssertionError: 'rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 0 2' != 'rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 1 2'\n- rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 0 2\n?                                                            ^\n+ rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 1 2\n?                                                            ^\n\n\n----------------------------------------------------------------------\nRan 26 tests in 0.051s\n\nFAILED (failures=1, errors=2)\n",
      "stack_trace": "test_book_coverage_depth (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_book_coverage_depth)\nTest opening book coverage depth. ... ok\ntest_move_weight_system (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_move_weight_system)\nTest move weight system. ... ok\ntest_opening_transpositions (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_opening_transpositions)\nTest handling of opening transpositions. ... FAIL\ntest_position_lookup_by_fen (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_position_lookup_by_fen)\nTest position lookup using FEN strings. ... ok\ntest_symmetrical_openings (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_symmetrical_openings)\nTest handling of symmetrical openings. ... ok\ntest_corrupted_book_data (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_corrupted_book_data)\nTest handling of corrupted book data. ... ERROR\ntest_empty_move_list (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_empty_move_list)\nTest handling of empty move lists. ... ok\ntest_invalid_board_state (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_board_state)\nTest handling of invalid board states. ... ERROR\ntest_invalid_move_objects (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_move_objects)\nTest handling of invalid move objects in book. ... ok\ntest_book_population (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_book_population)\nTest that book is populated with openings. ... ok\ntest_common_openings_included (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_common_openings_included)\nTest that common openings are included. ... ok\ntest_init_creates_book (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_init_creates_book)\nTest that initialization creates opening book. ... ok\ntest_starting_position_moves (unit_test_launchers.opening_book_testing.TestOpeningBookInitialization.test_starting_position_moves)\nTest moves available from starting position. ... ok\ntest_book_move_vs_random_move (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_book_move_vs_random_move)\nTest that book moves are different from random moves. ... ok\ntest_integration_with_chess_engine (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_integration_with_chess_engine)\nTest integration with chess engine workflow. ... ok\ntest_opening_sequence_consistency (unit_test_launchers.opening_book_testing.TestOpeningBookIntegration.test_opening_sequence_consistency)\nTest consistency of opening sequences. ... ok\ntest_get_book_move_after_d4 (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_after_d4)\nTest getting book move after 1.d4. ... ok\ntest_get_book_move_after_e4 (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_after_e4)\nTest getting book move after 1.e4. ... ok\ntest_get_book_move_from_starting_position (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_from_starting_position)\nTest getting book move from starting position. ... ok\ntest_get_book_move_unknown_position (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_unknown_position)\nTest getting book move from unknown position. ... ok\ntest_get_book_move_weighted_selection (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_get_book_move_weighted_selection)\nTest that move selection respects weights. ... ok\ntest_random_selection_consistency (unit_test_launchers.opening_book_testing.TestOpeningBookMoveSelection.test_random_selection_consistency)\nTest that random selection is consistent with weights. ... ok\ntest_initialization_performance (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_initialization_performance)\nTest opening book initialization performance. ... ok\ntest_memory_usage (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_memory_usage)\nTest memory usage of opening book. ... ok\ntest_move_lookup_performance (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_move_lookup_performance)\nTest move lookup performance. ... ok\ntest_position_coverage_efficiency (unit_test_launchers.opening_book_testing.TestOpeningBookPerformance.test_position_coverage_efficiency)\nTest efficiency of position coverage. ... ok\n\n======================================================================\nERROR: test_corrupted_book_data (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_corrupted_book_data)\nTest handling of corrupted book data.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 269, in test_corrupted_book_data\n    board = chess.Board('invalid_fen')  # This will raise exception\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 1711, in __init__\n    self.set_fen(fen)\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 2646, in set_fen\n    self._set_board_fen(board_part)\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\cloud_functions\\venv\\Lib\\site-packages\\chess\\__init__.py\", line 1132, in _set_board_fen\n    raise ValueError(f\"expected 8 rows in position part of fen: {fen!r}\")\nValueError: expected 8 rows in position part of fen: 'invalid_fen'\n\n======================================================================\nERROR: test_invalid_board_state (unit_test_launchers.opening_book_testing.TestOpeningBookErrorHandling.test_invalid_board_state)\nTest handling of invalid board states.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 259, in test_invalid_board_state\n    result = self.book.get_book_move(None)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\../..\\engine_utilities\\opening_book.py\", line 97, in get_book_move\n    fen = board.fen()\n          ^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'fen'\n\n======================================================================\nFAIL: test_opening_transpositions (unit_test_launchers.opening_book_testing.TestOpeningBookAdvancedFeatures.test_opening_transpositions)\nTest handling of opening transpositions.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine\\testing\\unit_test_launchers\\opening_book_testing.py\", line 224, in test_opening_transpositions\n    self.assertEqual(board1.fen(), board2.fen())\nAssertionError: 'rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 0 2' != 'rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 1 2'\n- rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 0 2\n?                                                            ^\n+ rnbqkbnr/ppp1pppp/8/3p4/3P4/5N2/PPP1PPPP/RNBQKB1R b KQkq - 1 2\n?                                                            ^\n\n\n----------------------------------------------------------------------\nRan 26 tests in 0.051s\n\nFAILED (failures=1, errors=2)\n",
      "memory_usage": 0.125,
      "assertions_count": null,
      "warnings": []
    }
  ],
  "configuration": {
    "execution": {
      "test_timeout": 300,
      "max_threads": 1,
      "failure_mode": "continue"
    },
    "output": {
      "verbosity": "minimal",
      "terminal": {
        "enabled": true,
        "show_progress": true,
        "show_timing": true,
        "colored_output": true
      },
      "file_logging": {
        "enabled": true,
        "log_directory": "testing/results",
        "log_format": "json",
        "include_stack_traces": true,
        "timestamp_format": "%Y%m%d_%H%M%S"
      }
    },
    "test_selection": {
      "run_all": false,
      "categories": {
        "engine_utilities": true,
        "metrics": true,
        "main_engine": true,
        "chess_game": true,
        "firebase": true
      },
      "include_tests": [
        "opening_book_testing"
      ],
      "exclude_tests": []
    },
    "environment": {
      "test_env_vars": {
        "v7p3r_TEST_MODE": "true",
        "v7p3r_LOG_LEVEL": "WARNING"
      },
      "test_data_dir": "testing/test_data",
      "temp_files_dir": "testing/temp",
      "mock_external": {
        "stockfish": false,
        "lichess_api": true,
        "firebase": false,
        "gcp_services": true
      }
    },
    "performance": {
      "enabled": true,
      "thresholds": {
        "move_generation": 0.1,
        "position_evaluation": 0.05,
        "book_lookup": 0.01
      },
      "memory_monitoring": {
        "enabled": true,
        "max_memory_mb": 500
      }
    },
    "integration": {
      "enabled": true,
      "external_services": {
        "stockfish": false,
        "firebase": false,
        "lichess": false
      }
    },
    "reporting": {
      "generate_html_report": true,
      "generate_junit_xml": true,
      "include_coverage": true,
      "include_performance_metrics": true,
      "include_memory_usage": true,
      "report_directory": "testing/reports"
    }
  },
  "environment_info": {
    "python_version": "3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)]",
    "platform": "win32",
    "working_directory": "S:\\Maker Stuff\\Programming\\v7p3r Chess Engine\\v7p3r_chess_engine",
    "failed_early": false,
    "total_system_memory": 31.836044311523438,
    "available_memory": 18.57555389404297,
    "cpu_count": 16
  }
}