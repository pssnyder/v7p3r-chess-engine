# config.yaml
# Configuration for Viper Chess Engine

# Game settings
game_config:
  starting_position: default     # TODO Test Name of the starting position, can be a FEN string or a predefined position name
  ai_vs_ai: true                 # Set to true for AI vs AI matches
  ai_game_count: 100             # Number of games to play in AI vs AI mode
  human_color: random            # Options: white, black, random
  game_type: standard            # Options: standard, chess960, king_of_the_hill, three_check, antichess, atomic, racing_kings
  game_clock: 0 #300             # Time in seconds for each player, 0 for no clock
  game_increment: 0 #2           # Increment in seconds per move, 0 for no increment
  strict_draw_prevention: true   # Enforce strict draw rules to fully block drawing moves that would lead to stalemate, insufficient material, and threefold repetition
  game_phase_awareness: true     # Enable/disable game phase-specific evaluation (opening, middlegame, endgame)
  rated: true                    # Set to true to record game and move metrics for analysis.

# Performance settings
performance:
  max_moves_evaluated: 50         # TODO Implement - Limit moves evaluated per position, only if move ordering is on to prevent misses
  use_transposition_table: true   # TODO Test - Cache evaluations for faster processing
  thread_limit: 4                 # TODO Control via setting - Enables an upper limit in thread count during async_mode
  hash_size: 64                   # MB limit for hash tables
  max_depth: 8                    # Max depth of dynamic deepsearch function to prevent runaway - **This is now the global cap for deepsearch**

# Debug settings
debug:
  enable_logging: true            # Turn logging on or off, auto-disables thoughts if false
  show_evaluation: true           # Show the evaluation during a game
  show_thinking: true            # Show what the AI is thinking during the game # TODO add thinking time to the log for each color

# Viper Search Types
# These are the search algorithms available for the Viper Engine to use, they can be used in combination with each other, but only one can be selected at a time for each AI, they should be the name of the search functions available in the engine
search_algorithms: [
  '_deep_search',         # Dynamic deep search with time control and iterative deepening - deepsearch is a custom search algorithm designed for the Viper engine that adjusts its depth and choice of algorithms based on the complexity and decision time for the position, more volatile and time consuming positions are given a wider and deeper search with less time boundaries to explore moves, while more stable positions are given a narrower and shallower search with faster increments to incentivize fast stable play.
  '_lookahead',          # Lookahead search with max value comparison - lookahead is a simple max evaluation comparison search algorithm that performs similar to simple_search but is able to see moves several plies in deep into the move tree, it is compatible with deepsearch and dynamic search depths, its primary advantage is its simplistic move comparison logic that provides 100% coverage with no pruning, recommended max depth is 4 due to exponential growth of the move tree, it is a basic search algorithm that is used in chess engines to find the best move for the current position
  '_minimax',            # Minimax search with alpha-beta pruning - minimax is a standard search algorithm for two-player games, where player A chooses the move that maximizes their score then player B choses a move trying to minimize player A's score, back and forth, it assumes that the evaluation function is symmetric, meaning that the evaluation for a position is the negative of the evaluation for the position with colors swapped, it uses a single evaluation and inverts the best move selection for the opponents turn, it is the most basic loop based search algorithm used in a chess engine
  '_negamax',            # Negamax search with alpha-beta pruning - negamax is a variant of minimax that simplifies the implementation - it assumes that the evaluation function is symmetric, meaning that the evaluation for a position is the negative of the evaluation for the position with colors swapped, it uses a single evaluation function and negates the score for the opponent's turn, this allows for a more efficient search tree traversal, it also uses alpha-beta pruning to reduce the number of nodes evaluated, negamax is a more efficient version of minimax that is commonly used in chess engines
  '_negascout',          # Negascout search with alpha-beta pruning - negascout is an optimization of negamax that reduces the number of nodes evaluated by playing a null move, i.e. skipping a turn to test a moves stability and tempo, valuable moves that gain tempo should survive two consecutive opponent moves without losing a set threshold of the evaluation, negascout is a more efficient version of negamax due to its stricter alpha beta pruning criteria based on scoring trends, commonly used in chess engines but not without quiescence for added blind spot protections, it is also known as principal variation search
  '_transposition_only', # Transposition table search - transposition is a technique that stores previously evaluated positions to avoid redundant calculations
  '_simple_search',      # Simple 1 ply search that returns the best move based on and evaluation of every legal move in the the immediate position from the active players perspective, it assumes symmetry in the position and both White and Black's scores are calculated based on absolute, not inverse values like negamax. it returns the best move for the current player in their immediate position, it is the least intelligent and least efficient of all searches, it maintains 100% coverage of the current position but only because it must still investigate all legal moves for the position without pruning, it also lacks forward memory and has no course of action after the first move in the sequence, not useful play over 500 ELO
  '_quiescence_only',    # Quiescence search that evaluates only stable positions, ignoring non-capturing moves, it is a search algorithm that is used in chess engines to find the best move for the current position, it is a basic search algorithm that is used in chess engines to find the best move for the current position, it is not very efficient but it is easy to implement and understand
  '_simple_eval',        # Simple evaluation function that returns a score based on material balance and piece-square tables, it is a basic evaluation function that is used in chess engines to find the best move for the current position, it is not very efficient but it is easy to implement and understand
  '_random',             # Random move selection, it randomly selects a move from the legal moves available, it is a basic unintelligent search algorithm that is used as a control for testing purposes, it is not very efficient but it is easy to implement and understand
]

# Stockfish specific settings
stockfish_config:
  path: engine_utilities\external_engines\stockfish\stockfish-windows-x86-64-avx2.exe # Updated path to Stockfish executable
  elo_rating: null # Set an ELO rating (e.g., 1000, 2000, null for max strength)
  skill_level: null # Set a skill level from 0-20 (0 weakest, 20 strongest, null for max strength)
  debug_stockfish: false # Enable debug logging for Stockfish engine (can be very verbose)

# Starting positions
starting_positions:
  default: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'  # Standard chess starting position
  london: 'rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1'  # London System (after 1.d4)
  kings_indian: 'rnbqkb1r/pppppppp/5n2/8/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 1 2'  # King's Indian Defense (after 1.d4 Nf6)
  caro_kann: 'rnbqkbnr/pp1ppppp/2p5/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2'  # Caro-Kann Defense (after 1.e4 c6)
  scandinavian: 'rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2'  # Scandinavian Defense (after 1.e4 d5)
  dutch: 'rnbqkbnr/ppppp1pp/8/5p2/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 0 2'  # Dutch Defense (after 1.d4 f5)
  sicilian: 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2'  # Sicilian Defense (after 1.e4 c5)
  vienna: 'rnbqkbnr/pppp1ppp/8/4p3/4P3/2N5/PPPP1PPP/R1BQKBNR b KQkq - 1 2'  # Vienna Game (after 1.e4 e5 2.Nc3)
  french: 'rnbqkbnr/pppp1ppp/4p3/8/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2'  # French Defense (after 1.e4 e6)
  nimzo_indian: 'rnbqkb1r/pppp1ppp/5n2/4p3/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 1 2'  # Nimzo-Indian Defense (after 1.d4 Nf6 2.c4 e6)

# AI vs AI Color Options
white_ai_config:
  exclude_from_metrics: false     # TODO Implement flag to exclude this engines performance from metrics collection, useful for testing, non-competitive, or third party AIs who's performance you may not want to record for this set of games, should flag all outputs from this color and engine for this match date_timestamp as being excluded from metrics, these metrics should still be gathered as a fallback, and in the event I do want to use them so we just want to have a flag in the database for exclude from metrics. Then I can always toggle the flags per game record in the database if I want to see a game or vice versa.
  engine: viper                   # Name of the engine being used (e.g., 'viper', 'stockfish'), this value is a direct reference to the engine configuration values below

black_ai_config:
  exclude_from_metrics: true   # does the same as above but for this engines performance as this color           
  engine: stockfish # sets this colors engine type, same as above, important note that if the engines are set the same then only whites metrics will be collected to prevent negation in win loss metrics

# Viper Engine Configuration
viper:
  ruleset: default_evaluation  # TODO Implement then mark done - Name of the evaluation rule set to use, see below for available options
  scoring_method: _calculate_score    # TODO Implement then mark done - Overrides the scoring method, viper engine defaults to the inbuilt _viper_scoring_calculation() function
  scoring_path: engine_utilities/viper_scoring_calculation  # TODO Implement then mark done - Import path to the scoring function, used for custom scoring methods, 
  search_algorithm: deepsearch  # TODO Implement then mark done - Move search type for White (see search_algorithms above for options)
  depth: 3                # TODO Implement then mark done - Depth of search for AI, 1 for random, 2 for simple search, 3+ for more complex searches
  max_depth: 8            # TODO Implement then mark done - Max depth of search for AI, 1 for random, 2 for simple search, 3+ for more complex searches
  use_solutions: true            # Use known positional solutions for evaluation (based on known puzzle solutions)
  pst: true                       # Use piece-square tables for evaluation
  pst_weight: 1.0                 # Weight for piece-square table evaluation
  move_ordering: true              # Enable move ordering for better performance
  quiescence: true                 # Enable quiescence search for tactical positions
  time_limit: 0                   # Time limit for move calculation in milliseconds, 0 for no limit
  scoring_modifier: 1.0           # Optional overall scoring multiplier/divider

# Stockfish Engine Configuration
stockfish:
  depth: 20                # Depth of search for Stockfish, 1 for random, 2 for simple search, 3+ for more complex searches
  max_depth: 20           # Max depth of search for Stockfish, 1 for random, 2 for simple search, 3+ for more complex searches
  skill_level: 20         # Skill level of Stockfish, 0 for weakest, 20 for strongest
  rating: 3000            # ELO rating of Stockfish, 1000 for weakest, 3000 for strongest

# =================================================================

# Additional Engine Configurations go here as new engines are added

# =================================================================



# Viper Engine Evaluation Rule settings (all scores in centipawns)
default_evaluation:
  checkmate_bonus: 1000000.0        # Bonus for checkmate threats
  repetition_penalty: -9999999999.0 # Penalty for threefold repetition
  center_control_bonus: 0.25        # Bonus per center square controlled
  knight_activity_bonus: 0.1        # Multiplier per square attacked by knight
  bishop_activity_bonus: 0.15       # Multiplier per square attacked by bishop
  king_safety_bonus: 1.5            # Bonus per pawn in king shield
  king_threat_penalty: -50.0        # Penalty for being checked (increased for king safety)
  undeveloped_penalty: -0.5         # Penalty for having under-developed minor pieces (increased)
  check_bonus: 50.0                 # Bonus for giving check (reduced)
  in_check_penalty: -10.0           # Penalty for being in check
  capture_bonus: 15.0               # Base bonus for captures (increased)
  castling_bonus: 5.0               # Bonus for castling
  en_passant_bonus: 1.0             # Bonus for en passant opportunity
  pawn_promotion_bonus: 5.0         # Bonus for pawn promotion
  passed_pawn_bonus: 1.0            # Bonus for having an un-opposed pawn (increased)
  hanging_piece_bonus: 2.0          # Bonus for attacking hanging pieces
  trapped_piece_penalty: -5.0       # Penalty for trapped pieces
  piece_development_bonus: 2.0      # Bonus for developing minor pieces
  piece_activity_bonus: 0.1         # Bonus for activating minor pieces
  knight_pair_bonus: 1.0            # Bonus for having knight pair
  knight_vision_penalty: -0.25      # Penalty for having the knight on a less active square
  pawn_advancement_bonus: 0.25      # Bonus for advancing pawns
  rook_development_penalty: 0.2     # Penalty for not developing rooks
  castling_protection_bonus: 3.0    # Bonus for keeping the right to castle
  castling_protection_penalty: -6.0 # Penalty for giving up castling rights without castling
  material_weight: 0.8              # Material calculation impact on eval
  piece_coordination_bonus: 0.5     # Bonus for piece coordination
  doubled_pawn_penalty: -0.5        # Penalty for having doubled pawns
  isolated_pawn_penalty: -0.5       # Penalty for having isolated pawns
  backward_pawn_penalty: -0.5       # Penalty for having backward pawns
  bishop_vision_bonus: 1.0          # Bonus for the bishops having good board vision
  tempo_bonus: 0.1                  # Bonus for keeping the game moving forward, as opposed to an end scenario
  stacked_rooks_bonus: 0.5          # Bonus for having the rooks on the same file
  coordinated_rooks_bonus: 0.25     # Bonus for having the rooks on the same rank
  stalemate_penalty: -9999999999.0  # Penalty for stalemate situations
  draw_penalty: -9999999999.0       # Penalty for draw situations
  undefended_piece_penalty: -2.0    # Penalty for undefended pieces
  pawn_structure_bonus: 0.1         # Evaluate pawn structure
  file_control_bonus: 0.2           # Bonus for controlling open files
  open_file_bonus: 0.3              # Bonus for having rooks on open files
  rook_position_bonus: 0.4          # Bonus for rooks on the 7th rank
  exposed_king_penalty: -10.0       # Penalty for having the king on an open file
  piece_mobility_bonus: 0.1         # Bonus for piece mobility
  checkmate_move_bonus: 1000000     # Bonus for finding a checkmate during move ordering scoring
  check_move_bonus: 10000           # Bonus for finding a check move during move ordering scoring
  hash_move_bonus: 5000             # Bonus for finding a hash move during move ordering scoring
  capture_move_bonus: 4000          # Bonus for finding a capture move during move ordering scoring
  promotion_move_bonus: 3000        # Bonus for finding a promotion move during move ordering scoring
  killer_move_bonus: 2000           # Bonus for finding a killer moves during move ordering scoring
  history_move_bonus: 1000          # Bonus for finding a historical move during move ordering scoring
  counter_move_bonus: 1000          # Bonus for finding a strong countermove during move ordering scoring

# Gives the AI basic survival skills to prevent checks, captures, and threats, but lacks advanced strategies.
simple_evaluation:
  checkmate_bonus: 1000000.0        # Bonus for checkmate threats
  repetition_penalty: -100000.0     # Penalty for threefold repetition
  center_control_bonus: 0.0         # Bonus per center square controlled
  knight_activity_bonus: 0.0        # Multiplier per square attacked by knight
  bishop_activity_bonus: 0.0        # Multiplier per square attacked by bishop
  king_safety_bonus: 1.5            # Bonus per pawn in king shield
  king_threat_penalty: -50.0        # Penalty for being checked (increased for king safety)
  undeveloped_penalty: 0.0          # Penalty for having under-developed minor pieces (increased)
  check_bonus: 50.0                 # Bonus for giving check (reduced)
  in_check_penalty: -10.0           # Penalty for being in check
  capture_bonus: 15.0               # Base bonus for captures (increased)
  castling_bonus: 0.0               # Bonus for castling
  en_passant_bonus: 0.0             # Bonus for en passant opportunity
  pawn_promotion_bonus: 0.0         # Bonus for pawn promotion
  passed_pawn_bonus: 0.0            # Bonus for having an un-opposed pawn (increased)
  hanging_piece_bonus: 0.0          # Bonus for attacking hanging pieces
  trapped_piece_penalty: 0.0       # Penalty for trapped pieces
  piece_development_bonus: 0.0      # Bonus for developing minor pieces
  piece_activity_bonus: 0.0         # Bonus for activating minor pieces
  knight_pair_bonus: 0.0            # Bonus for having knight pair
  knight_vision_penalty: 0.0        # Penalty for having the knight on a less active square
  pawn_advancement_bonus: 0.0       # Bonus for advancing pawns
  rook_development_penalty: 0.0     # Penalty for not developing rooks
  castling_protection_bonus: 0.0    # Bonus for keeping the right to castle
  castling_protection_penalty: 0.0  # Penalty for giving up castling rights without castling
  material_weight: 0.0              # Material calculation impact on eval
  piece_coordination_bonus: 0.0     # Bonus for piece coordination
  doubled_pawn_penalty: 0.0         # Penalty for having doubled pawns
  isolated_pawn_penalty: 0.0        # Penalty for having isolated pawns
  backward_pawn_penalty: 0.0        # Penalty for having backward pawns
  bishop_vision_bonus: 0.0          # Bonus for the bishops having good board vision
  tempo_bonus: 0.0                  # Bonus for keeping the game moving forward, as opposed to an end scenario
  stacked_rooks_bonus: 0.0          # Bonus for having the rooks on the same file
  coordinated_rooks_bonus: 0.0      # Bonus for having the rooks on the same rank
  stalemate_penalty: -1000000.0     # Penalty for stalemate situations
  draw_penalty: -500000.0           # Penalty for draw situations
  undefended_piece_penalty: 0.0     # Penalty for undefended pieces
  pawn_structure_bonus: 0.0         # Evaluate pawn structure
  file_control_bonus: 0.0           # Bonus for controlling open files
  open_file_bonus: 0.0              # Bonus for having rooks on open files
  rook_position_bonus: 0.0          # Bonus for rooks on the 7th rank
  exposed_king_penalty: -10.0       # Penalty for having the king on an open file
  piece_mobility_bonus: 0.0         # Bonus for piece mobility
  # move ordering bonuses - do not impact evaluation - do not update these values
  checkmate_move_bonus: 1000000     # Bonus for finding a checkmate during move ordering scoring
  check_move_bonus: 10000           # Bonus for finding a check move during move ordering scoring
  hash_move_bonus: 5000             # Bonus for finding a hash move during move ordering scoring
  capture_move_bonus: 4000          # Bonus for finding a capture move during move ordering scoring
  promotion_move_bonus: 3000        # Bonus for finding a promotion move during move ordering scoring
  killer_move_bonus: 2000           # Bonus for finding a killer moves during move ordering scoring
  history_move_bonus: 1000          # Bonus for finding a historical move during move ordering scoring
  counter_move_bonus: 1000          # Bonus for finding a strong countermove during move ordering scoring

# Aggressive evaluation settings for more forcing play, prioritizes captures, piece mobility/activity, and attacks over king safety, defense, and tactics.
aggressive_evaluation:
  checkmate_bonus: 1000000.0        # Bonus for checkmate threats
  repetition_penalty: -100000.0     # Penalty for threefold repetition
  center_control_bonus: 0.0         # Bonus per center square controlled
  knight_activity_bonus: 0.25       # Multiplier per square attacked by knight
  bishop_activity_bonus: 0.5        # Multiplier per square attacked by bishop
  king_safety_bonus: 0.5            # Bonus per pawn in king shield
  king_threat_penalty: -10.0        # Penalty for being checked (increased for king safety)
  undeveloped_penalty: -5.0         # Penalty for having under-developed minor pieces (increased)
  check_bonus: 100.0                # Bonus for giving check (reduced)
  in_check_penalty: -5.0            # Penalty for being in check
  capture_bonus: 50.0               # Base bonus for captures (increased)
  castling_bonus: 1.0               # Bonus for castling
  en_passant_bonus: 0.0             # Bonus for en passant opportunity
  pawn_promotion_bonus: 5.0         # Bonus for pawn promotion
  passed_pawn_bonus: 0.0            # Bonus for having an un-opposed pawn (increased)
  hanging_piece_bonus: 0.0          # Bonus for attacking hanging pieces
  trapped_piece_penalty: 0.0        # Penalty for trapped pieces
  piece_development_bonus: 10.0     # Bonus for developing minor pieces
  piece_activity_bonus: 5.0         # Bonus for activating minor pieces
  knight_pair_bonus: 0.0            # Bonus for having knight pair
  knight_vision_penalty: -1.0       # Penalty for having the knight on a less active square
  pawn_advancement_bonus: 1.0       # Bonus for advancing pawns
  rook_development_penalty: 0.5     # Penalty for not developing rooks
  castling_protection_bonus: 3.0    # Bonus for keeping the right to castle
  castling_protection_penalty: -6.0 # Penalty for giving up castling rights without castling
  material_weight: 1.0              # Material calculation impact on eval
  piece_coordination_bonus: 0.25    # Bonus for piece coordination
  doubled_pawn_penalty: 0.0         # Penalty for having doubled pawns
  isolated_pawn_penalty: 0.0        # Penalty for having isolated pawns
  backward_pawn_penalty: 0.0        # Penalty for having backward pawns
  bishop_vision_bonus: 0.0          # Bonus for the bishops having good board vision
  tempo_bonus: 0.0                  # Bonus for keeping the game moving forward, as opposed to an end scenario
  stacked_rooks_bonus: 0.0          # Bonus for having the rooks on the same file
  coordinated_rooks_bonus: 0.0      # Bonus for having the rooks on the same rank
  stalemate_penalty: -1000000.0     # Penalty for stalemate situations
  draw_penalty: -500000.0           # Penalty for draw situations
  undefended_piece_penalty: -2.0    # Penalty for undefended pieces
  pawn_structure_bonus: 0.0         # Evaluate pawn structure
  file_control_bonus: 1.0           # Bonus for controlling open files
  open_file_bonus: 1.0              # Bonus for having rooks on open files
  rook_position_bonus: 2.0          # Bonus for rooks on the 7th rank
  exposed_king_penalty: 0.0         # Penalty for having the king on an open file
  piece_mobility_bonus: 5.0         # Bonus for piece mobility
  # move ordering bonuses - do not impact evaluation - do not update these values
  checkmate_move_bonus: 1000000     # Bonus for finding a checkmate during move ordering scoring
  check_move_bonus: 10000           # Bonus for finding a check move during move ordering scoring
  hash_move_bonus: 5000             # Bonus for finding a hash move during move ordering scoring
  capture_move_bonus: 4000          # Bonus for finding a capture move during move ordering scoring
  promotion_move_bonus: 3000        # Bonus for finding a promotion move during move ordering scoring
  killer_move_bonus: 2000           # Bonus for finding a killer moves during move ordering scoring
  history_move_bonus: 1000          # Bonus for finding a historical move during move ordering scoring
  counter_move_bonus: 1000          # Bonus for finding a strong countermove during move ordering scoring

# Conservative evaluation settings for more cautious play, prioritizes king safety and piece defense over tempo and aggressive tactics.
conservative_evaluation:
  checkmate_bonus: 1000000.0        # Bonus for checkmate threats
  repetition_penalty: -100000.0     # Penalty for threefold repetition
  center_control_bonus: 0.1         # Bonus per center square controlled
  knight_activity_bonus: 0.05       # Multiplier per square attacked by knight
  bishop_activity_bonus: 0.075      # Multiplier per square attacked by bishop
  king_safety_bonus: 10.0           # Bonus per pawn in king shield
  king_threat_penalty: -50.0        # Penalty for being checked (increased for king safety)
  undeveloped_penalty: -0.5         # Penalty for having under-developed minor pieces (increased)
  check_bonus: 50.0                 # Bonus for giving check (reduced)
  in_check_penalty: -10.0           # Penalty for being in check
  capture_bonus: 1.0                # Base bonus for captures (increased)
  castling_bonus: 15.0              # Bonus for castling
  en_passant_bonus: 1.0             # Bonus for en passant opportunity
  pawn_promotion_bonus: 5.0         # Bonus for pawn promotion
  passed_pawn_bonus: 1.0            # Bonus for having an un-opposed pawn (increased)
  hanging_piece_bonus: 2.0          # Bonus for attacking hanging pieces
  trapped_piece_penalty: -5.0       # Penalty for trapped pieces
  piece_development_bonus: 2.0      # Bonus for developing minor pieces
  piece_activity_bonus: 0.1         # Bonus for activating minor pieces
  knight_pair_bonus: 1.0            # Bonus for having knight pair
  knight_vision_penalty: -0.25      # Penalty for having the knight on a less active square
  pawn_advancement_bonus: 0.25      # Bonus for advancing pawns
  rook_development_penalty: 0.2     # Penalty for not developing rooks
  castling_protection_bonus: 3.0    # Bonus for keeping the right to castle
  castling_protection_penalty: -6.0 # Penalty for giving up castling rights without castling
  material_weight: 0.8              # Material calculation impact on eval
  piece_coordination_bonus: 0.5     # Bonus for piece coordination
  doubled_pawn_penalty: -0.5        # Penalty for having doubled pawns
  isolated_pawn_penalty: -0.5       # Penalty for having isolated pawns
  backward_pawn_penalty: -0.5       # Penalty for having backward pawns
  bishop_vision_bonus: 1.0          # Bonus for the bishops having good board vision
  tempo_bonus: 0.1                  # Bonus for keeping the game moving forward, as opposed to an end scenario
  stacked_rooks_bonus: 0.5          # Bonus for having the rooks on the same file
  coordinated_rooks_bonus: 0.25     # Bonus for having the rooks on the same rank
  stalemate_penalty: -1000000.0     # Penalty for stalemate situations
  draw_penalty: -500000.0           # Penalty for draw situations
  undefended_piece_penalty: -2.0    # Penalty for undefended pieces
  pawn_structure_bonus: 0.1         # Evaluate pawn structure
  file_control_bonus: 0.2           # Bonus for controlling open files
  open_file_bonus: 0.3              # Bonus for having rooks on open files
  rook_position_bonus: 0.4          # Bonus for rooks on the 7th rank
  exposed_king_penalty: -10.0       # Penalty for having the king on an open file
  piece_mobility_bonus: 0.1         # Bonus for piece mobility
  # move ordering bonuses - do not impact evaluation - do not update these values
  checkmate_move_bonus: 1000000     # Bonus for finding a checkmate during move ordering scoring
  check_move_bonus: 10000           # Bonus for finding a check move during move ordering scoring
  hash_move_bonus: 5000             # Bonus for finding a hash move during move ordering scoring
  capture_move_bonus: 4000          # Bonus for finding a capture move during move ordering scoring
  promotion_move_bonus: 3000        # Bonus for finding a promotion move during move ordering scoring
  killer_move_bonus: 2000           # Bonus for finding a killer moves during move ordering scoring
  history_move_bonus: 1000          # Bonus for finding a historical move during move ordering scoring
  counter_move_bonus: 1000          # Bonus for finding a strong countermove during move ordering scoring

null_evaluation:                    # empty evaluation for testing purposes
  checkmate_bonus: 0.0              # Bonus for checkmate threats
  repetition_penalty: 0.0           # Penalty for threefold repetition
  center_control_bonus: 0.0         # Bonus per center square controlled
  knight_activity_bonus: 0.0        # Multiplier per square attacked by knight
  bishop_activity_bonus: 0.0        # Multiplier per square attacked by bishop
  king_safety_bonus: 0.0            # Bonus per pawn in king shield
  king_threat_penalty: 0.0          # Penalty for being checked (increased for king safety)
  undeveloped_penalty: 0.0          # Penalty for having under-developed minor pieces (increased)
  check_bonus: 0.0                  # Bonus for giving check (reduced)
  in_check_penalty: 0.0             # Penalty for being in check
  capture_bonus: 0.0                # Base bonus for captures (increased)
  castling_bonus: 0.0               # Bonus for castling
  en_passant_bonus: 0.0             # Bonus for en passant opportunity
  pawn_promotion_bonus: 0.0         # Bonus for pawn promotion
  passed_pawn_bonus: 0.0            # Bonus for having an un-opposed pawn (increased)
  hanging_piece_bonus: 0.0          # Bonus for attacking hanging pieces
  trapped_piece_penalty: 0.0        # Penalty for trapped pieces
  piece_development_bonus: 0.0      # Bonus for developing minor pieces
  piece_activity_bonus: 0.0         # Bonus for activating minor pieces
  knight_pair_bonus: 0.0            # Bonus for having knight pair
  knight_vision_penalty: 0.0        # Penalty for having the knight on a less active square
  pawn_advancement_bonus: 0.0       # Bonus for advancing pawns
  rook_development_penalty: 0.0     # Penalty for not developing rooks
  castling_protection_bonus: 0.0    # Bonus for keeping the right to castle
  castling_protection_penalty: 0.0  # Penalty for giving up castling rights without castling
  material_weight: 0.0              # Material calculation impact on eval
  piece_coordination_bonus: 0.0     # Bonus for piece coordination
  doubled_pawn_penalty: 0.0         # Penalty for having doubled pawns
  isolated_pawn_penalty: 0.0        # Penalty for having isolated pawns
  backward_pawn_penalty: 0.0        # Penalty for having backward pawns
  bishop_vision_bonus: 0.0          # Bonus for the bishops having good board vision
  tempo_bonus: 0.0                  # Bonus for keeping the game moving forward, as opposed to an end scenario
  stacked_rooks_bonus: 0.0          # Bonus for having the rooks on the same file
  coordinated_rooks_bonus: 0.0      # Bonus for having the rooks on the same rank
  stalemate_penalty: 0.0            # Penalty for stalemate situations
  draw_penalty: 0.0                 # Penalty for draw situations
  undefended_piece_penalty: 0.0     # Penalty for undefended pieces
  pawn_structure_bonus: 0.0         # Evaluate pawn structure
  file_control_bonus: 0.0           # Bonus for controlling open files
  open_file_bonus: 0.0              # Bonus for having rooks on open files
  rook_position_bonus: 0.0          # Bonus for rooks on the 7th rank
  exposed_king_penalty: 0.0         # Penalty for having the king on an open file
  piece_mobility_bonus: 0.0         # Bonus for piece mobility
  # move ordering bonuses - do not impact evaluation - do not update these values
  checkmate_move_bonus: 1000000     # Bonus for finding a checkmate during move ordering scoring
  check_move_bonus: 10000           # Bonus for finding a check move during move ordering scoring
  hash_move_bonus: 5000             # Bonus for finding a hash move during move ordering scoring
  capture_move_bonus: 4000          # Bonus for finding a capture move during move ordering scoring
  promotion_move_bonus: 3000        # Bonus for finding a promotion move during move ordering scoring
  killer_move_bonus: 2000           # Bonus for finding a killer moves during move ordering scoring
  history_move_bonus: 1000          # Bonus for finding a historical move during move ordering scoring
  counter_move_bonus: 1000          # Bonus for finding a strong countermove during move ordering scoring