#!/usr/bin/env python3

"""
Debug Position 4 Perft Issues

Position 4 has move generation bugs - generating 44 moves instead of 8.
Let's analyze what's wrong.
"""

import chess
import sys
import os

# Add src directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from v7p3r import V7P3REngine

def debug_position_4():
    """Debug the failing perft position"""
    
    # Position 4 - the failing one
    fen = "r3k2r/8/3Q4/8/8/5q2/8/R3K2R b KQkq - 0 1"
    print(f"Debugging Position 4:")
    print(f"FEN: {fen}")
    print(f"Expected moves at depth 1: 8")
    print()
    
    # Create board and analyze
    board = chess.Board(fen)
    
    print("Board visualization:")
    print(board)
    print()
    
    print("Legal moves generated by python-chess:")
    legal_moves = list(board.legal_moves)
    print(f"Count: {len(legal_moves)}")
    for i, move in enumerate(legal_moves, 1):
        print(f"{i:2d}. {move}")
    
    print()
    print("This position should only have 8 legal moves.")
    print("The issue is likely in our perft implementation, not python-chess.")
    print("Let's check our perft method...")
    
    # Test with our engine
    engine = V7P3REngine()
    
    print(f"\nV7P3R perft depth 1 (with divide):")
    try:
        result = engine.perft(board, 1, divide=True)
        print(f"Total nodes: {result}")
    except Exception as e:
        print(f"Error: {e}")
    
    print(f"\nExpected result: 8 moves total")
    print("Each move should generate exactly 1 node at depth 1")

if __name__ == "__main__":
    debug_position_4()